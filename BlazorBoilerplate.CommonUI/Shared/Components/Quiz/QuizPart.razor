@using BlazorBoilerplate.Shared.Dto.Blog
@inject HttpClient Http
@inject IMatToaster matToaster
@using System.Net

    <div style="width:135px;">
        <MatButton Icon="playlist_add" Label="Тест" OnClick="@((e) => OpenDialog())" Raised="true"></MatButton>
    </div>
    @if (quizzes?.Count != 0)
    {
        @foreach (var oneTest in quizzes)
        {
            <MatDivider />
            <MatIconButton Icon="delete" OnClick="@(() => OpenDeleteDialog(oneTest.Id))"></MatIconButton>
            <MatList>
                @foreach (var question in oneTest.Items)
                {
                    <h5>@question.Question</h5>
                    <MatListItem>
                        @foreach (var variant in question.Normalized)
                        {
                            <div class="list-group list-group-flush">
                                <div class="list-group-item ripple">
                                    <label for="@($"{question.Id+variant}")">@variant</label>
                                    <input type="checkbox" id="@($"{question.Id+variant}")" @onselectionchange="@(e => { quizItems.Remove(quizItems.Find(x => x.Id == question.Id)) ; quizItems.Add(new QuizItemDto(question, variant)); })" />
                                </div>
                            </div>
                        }
                    </MatListItem>
                }
            </MatList>
            <MatButton Label="Проверить" OnClick="@(e => { totalScoreDialogIsOpen = true;})"></MatButton>
            <MatDialog @bind-IsOpen="@totalScoreDialogIsOpen">
                <MatDialogTitle>Ваши результаты</MatDialogTitle>
                <MatDialogContent>
                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@(e => { totalScoreDialogIsOpen = false;})">Закрыть</MatButton>
                </MatDialogActions>
            </MatDialog>
            <MatDivider />
        }
    }

    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>Создать</MatDialogTitle>
        <MatDialogContent>
            <EditForm Model="@Quiz" OnValidSubmit="@CreateQuiz">
                @foreach (var newQuestion in quizItems)
                {
                    <MatCard>
                        <MatCardActions>
                            <DataAnnotationsValidator />
                            <fieldset>
                                <div class="form-group">
                                    <label for="@($"{newQuestion?.Question}")">@newQuestion?.Question</label>
                                    <input placeholder="Ваш вопрос" id="@($"{newQuestion?.Question}")" value="@newQuestion?.Question"
                                           @onchange="@(e => newQuestion.Question = e.Value.ToString())" />
                                </div>
                                <div class="form-group">
                                    <label for="@($"{newQuestion?.Answers}")">@newQuestion?.Answers</label>
                                    <input placeholder="Варианты ответов" id="@($"{newQuestion?.Answers}")" value="@newQuestion?.Answers"
                                           @onchange="@(e => newQuestion.Answers = e.Value.ToString())" />
                                </div>
                                <div class="form-group">
                                    <label for="@($"{newQuestion?.RightAnswer}")">@newQuestion?.RightAnswer</label>
                                    <input placeholder="Правильный ответ" id="@($"{newQuestion?.RightAnswer}")" value="@newQuestion?.RightAnswer"
                                           @onchange="@(e => newQuestion.RightAnswer = e.Value.ToString())" />
                                </div>
                                <div class="form-group">
                                    <label for="@($"{newQuestion?.PicturePath}")">@newQuestion?.PicturePath</label>
                                    <input placeholder="Путь к картинке" id="@($"{newQuestion?.PicturePath}")" value="@newQuestion?.PicturePath"
                                           @onchange="@(e => newQuestion.PicturePath = e.Value.ToString())" />
                                </div>
                            </fieldset>
                        </MatCardActions>
                    </MatCard>
                    <MatDivider/>
                }
                <MatButton OnClick="@CreateQuestion">Новый</MatButton>
                <MatDivider/>
            </EditForm>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogIsOpen = false; })">Закрыть</MatButton>
            <MatButton OnClick="@CreateQuiz">Завершить</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@deleteDialogOpen" Style="z-index:100">
        <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Подтвердить</MatDialogTitle>
        <MatDialogContent>
            Хотите удалить @Quiz.Id ?
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { deleteDialogOpen = false; })">Закрыть</MatButton>
            <MatButton OnClick="@Delete">Удалить</MatButton>
        </MatDialogActions>
    </MatDialog>

@code {
    bool deleteDialogOpen = false;
    bool dialogIsOpen = false;
    bool totalScoreDialogIsOpen = false;
    List<QuizDto> quizzes = new List<QuizDto>();
    List<QuizItemDto> quizItems = new List<QuizItemDto>();
    QuizDto Quiz { get; set; } = new QuizDto() { DirectionTitle = "Economy" };

    protected override async Task OnInitializedAsync()
    {
        await ReadQuizzes();
    }

    async Task ReadQuizzes()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/quiz/course/" + Quiz.Id);

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Тесты получены");
            quizzes = Newtonsoft.Json.JsonConvert.DeserializeObject<QuizDto[]>(apiResponse.Result.ToString()).Where(a => a.DirectionTitle == "Economy").ToList<QuizDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось получить");
        }
    }

    public async void Update(QuizDto quiz)
    {
        //this updates the IsCompleted flag only
        try
        {
            quiz.Items = quizItems;
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/quiz", quiz);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось сохранить");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось сохранить");
        }
    }

    public async Task Delete()
    {
        try
        {
            var response = await Http.DeleteAsync("api/quiz/" + Quiz.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Удалено", MatToastType.Success);
                quizzes.Remove(Quiz);
            }
            else
            {
                matToaster.Add("Не удалось удалить: " + response.StatusCode, MatToastType.Danger);
            }
            deleteDialogOpen = false;
            Quiz = new QuizDto() { DirectionTitle = "Economy", CreationDate = DateTime.Now };
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось сохранить");
        }
    }

    public void OpenDialog()
    {
        dialogIsOpen = true;
        quizItems.Add(new QuizItemDto());
    }

    public void OpenDeleteDialog(long quizId)
    {
        Quiz = quizzes.Where(x => x.Id == quizId).SingleOrDefault();
        this.deleteDialogOpen = true;
    }

    public void CreateQuestion()
    {
        try
        {
            quizItems.Add(new QuizItemDto());
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать вопрос");
        }
    }

    public async Task CreateQuiz()
    {
        dialogIsOpen = false;
        try
        {
            Quiz.Items = quizItems;
            Quiz.CreationDate = DateTime.Now;
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/quiz", Quiz);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                Quiz = Newtonsoft.Json.JsonConvert.DeserializeObject<QuizDto>(apiResponse.Result.ToString());
                quizzes.Add(Quiz);

                Quiz = new QuizDto() { DirectionTitle = "Economy", CreationDate = DateTime.Now }; //reset todo after insert
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось создать");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать");
        }
    }
}
