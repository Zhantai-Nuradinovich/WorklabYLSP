@using BlazorBoilerplate.Shared.Dto.Blog
@using BlazorBoilerplate.Shared.Dto.Account
@using System.Net
@inject HttpClient Http
@inject IMatToaster matToaster


<AuthorizeView Context="AuthorizeContext">
    <NotAuthorized>
        <div class="alert alert-success">
            <a href="/account/login">Войдите</a> чтобы присоединиться к чату.
        </div>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView Context="AuthorizeContext">
    <Authorized>
        <div class="comments-container">
            <h1>Комментарии</h1>
            <div class="comments-list">
                @if (Comments == null || Comments.Count == 0)
                {
                    <MatListItem>
                        <MatListItemText>
                            Загрузка сообщений...
                        </MatListItemText>
                    </MatListItem>
                }
                else
                {
                    @foreach (var comment in Comments.OrderBy(x => x.When))
                    {
                        <EditForm Model="@comment" OnValidSubmit="@((e) => DeleteMessage(comment.CommentId))">
                            <div class="comment-main-level">
                                <div class="comment-avatar"><img src="http://i9.photobucket.com/albums/a88/creaticode/avatar_1_zps8e1c80cd.jpg" alt=""></div>
                                <div class="comment-box">
                                    <div class="comment-head">
                                        <h6 class="comment-name by-author">@comment.UserName</h6>
                                        <span>@comment.When</span>
                                    </div>
                                    <div class="comment-content">
                                        @((MarkupString)comment.Text)
                                    </div>
                                </div>
                                <MatIconButton Icon="delete"
                                               Type="submit"
                                               Style="float: right;">
                                </MatIconButton>
                            </div>
                            <br />
                            <br />
                        </EditForm>
                    }
                }
            </div>
            <EditForm OnValidSubmit="CreateMessage" Model="@commentDto" autocomplete="off">
                <div class="chat-message clearfix">
                    @if (Creating)
                    {
                        <button style="width:100%;" class="btn btn-light">
                            <span class="glyphicon glyphicon-refresh glyphicon-refresh-animate"></span> Отправляется...
                        </button>
                    }
                    else
                    {
                        <BlazoredTextEditor @ref="@QuillHtml">
                            <ToolbarContent>
                                <span class="ql-formats">
                                    <select class="ql-font">
                                        <option selected=""></option>
                                        <option value="serif"></option>
                                        <option value="monospace"></option>
                                    </select>
                                    <select class="ql-size">
                                        <option value="small"></option>
                                        <option selected=""></option>
                                        <option value="large"></option>
                                        <option value="huge"></option>
                                    </select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                    <button class="ql-indent" value="-1"></button>
                                    <button class="ql-indent" value="+1"></button>
                                    <select class="ql-align">
                                        <option selected=""></option>
                                        <option value="center"></option>
                                        <option value="right"></option>
                                        <option value="justify"></option>
                                    </select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                            </EditorContent>
                        </BlazoredTextEditor>
                        <MatButton Style="background-color: #4F94C1; color: snow; border-radius: 5px; margin: 10px;" OnClick="CreateMessage">Отправить</MatButton>
                    }
                </div>
            </EditForm>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public List<CommentDto> Comments { get; set; }

    [Parameter]
    public long CourseId { get; set; }

    [Parameter]
    public UserInfoDto UserInfoDto { get; set; }

    CommentDto commentDto { get; set; } = new CommentDto();
    BlazoredTextEditor QuillHtml;
    bool IsOpened { get; set; }
    bool Creating { get; set; } = false;
    string avatar = "https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png";

    async Task DeleteMessage(long id)
    {
        try
        {
            var response = await Http.DeleteAsync("api/comment/" + id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Удалено", MatToastType.Success);
                Comments.Remove(Comments.Find(x => x.CommentId == id));
            }
            else
            {
                matToaster.Add("Не удалось удалить: " + response.StatusCode, MatToastType.Danger);
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось сохранить");
        }
    }

    async Task CreateMessage()
    {
        Creating = true;

        commentDto.CourseId = CourseId;
        commentDto.UserID = UserInfoDto.UserId;
        commentDto.UserName = UserInfoDto.UserName;
        commentDto.When = DateTime.Now;
        commentDto.Text = await this.QuillHtml.GetHTML();
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/comment", commentDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                Comments.Add(commentDto); //Newtonsoft.Json.JsonConvert.DeserializeObject<CommentDto>((await Http.GetFromJsonAsync<ApiResponseDto>("api/comment/" + CourseId)).Result.ToString())
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось создать");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать");
        }
        Creating = false;
        commentDto = new CommentDto();
    }
}
