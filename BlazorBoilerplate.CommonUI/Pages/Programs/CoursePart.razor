@page "/courses/{CourseId}"
@using BlazorBoilerplate.Shared.Dto.Blog
@using BlazorBoilerplate.CommonUI.Shared.Components.Comment
@using BlazorBoilerplate.Shared.Dto.Account
@using BlazorBoilerplate.CommonUI.Shared.Components.Tests 
@using BlazorBoilerplate.CommonUI.Shared.Components.Text
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject IMatToaster matToaster
@inject AuthenticationStateProvider authStateProvider

<MainContainer Title="@CourseView?.CourseName"
               SubTitle="@CourseView?.Description"
               ContentTitle="Начнём!">
    @if (IsAdminOrCoordinator)
    {
        <BaseQuiz CourseId="@(long.Parse(CourseId))" />
        <BaseText CourseId="@(long.Parse(CourseId))" />
    }
    <p class="heading">Надо посмотреть что-нибудь о пагинации контента и попробовать через енумератор. Продумать структуру как у курсеры и добавить привязку к пользователю + почитать об аналитике сайта</p>
        @if (oneContent is QuizDto quiz)
        {
            <OneQuiz Quiz="@quiz" IsAdminOrCoordinator="@IsAdminOrCoordinator" />
        }
        else if (oneContent is TextDto text)
        {
            <OneText Text="@text" IsAdminOrCoordinator="@IsAdminOrCoordinator" />
        }
        else if (oneContent is ContentFileDto file)
        {
            <div>@(file?.ContentFileName)</div>
        }
    <MatButton Label="Назад" 
               Style="background-color: #4F94C1; color: snow; border-radius: 5px; margin: 10px;"
               OnClick="PreviousStep">
    </MatButton>

    <MatButton Label="Вперед" 
               Style="background-color: #4F94C1; color: snow; border-radius: 5px; margin: 10px;"
               OnClick="NextStep">
    </MatButton>
    <CommentPart UserInfoDto="@userInfo" Comments="@comments" CourseId="@CourseView.CourseId" />
</MainContainer>

@code {
    bool IsAdminOrCoordinator { get; set; } = false;

    [Parameter]
    public string CourseId { get; set; }
    UserInfoDto userInfo;
    CourseDto CourseView { get; set; } = new CourseDto();
    List<QuizDto> quizzes = new List<QuizDto>();
    List<QuizItemDto> quizItems = new List<QuizItemDto>();
    List<TextDto> texts = new List<TextDto>();
    List<ContentFileDto> files = new List<ContentFileDto>();
    List<CommentDto> comments = new List<CommentDto>();
    List<ContentDto> content = new List<ContentDto>();
    ContentDto oneContent = new ContentDto();
    int contentIndex = 0;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            IsAdminOrCoordinator = user.IsInRole("Administrator") || user.IsInRole("Coordinator");
        }

        userInfo = await ((IdentityAuthenticationStateProvider)authStateProvider).GetUserInfo();
        await ReadCourse();
        await ReadFiles();
        await ReadTexts();
        await ReadComments();
        await ReadQuizzes();
        await ReadQuizItems();
        content.AddRange(quizzes);
        content.AddRange(texts);
        content.AddRange(files);
        content = content.OrderBy(t => t.When).ToList();
        oneContent = content[contentIndex];
    }

    public void NextStep()
    {
        contentIndex++;
        oneContent = contentIndex < content.Count ? content[contentIndex] : null;
    }

    public void PreviousStep()
    {
        contentIndex--;
        oneContent = contentIndex >= 0 ? content[contentIndex] : null;
    }

    async Task ReadCourse()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/course/" + CourseId);

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Направления получены");
            CourseView = Newtonsoft.Json.JsonConvert.DeserializeObject<CourseDto>(apiResponse.Result.ToString());
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось получить");
        }
    }

    async Task ReadQuizzes()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/quiz/course/" + CourseId);

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Направления получены");
            quizzes = Newtonsoft.Json.JsonConvert.DeserializeObject<QuizDto[]>(apiResponse.Result.ToString()).ToList<QuizDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось получить");
        }
    }

    async Task ReadQuizItems()
    {
        foreach (var item in quizzes)
        {
            ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/quizitem/quiz/" + item.Id);

            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success, "Направления получены");
                item.Items = Newtonsoft.Json.JsonConvert.DeserializeObject<QuizItemDto[]>(apiResponse.Result.ToString()).ToList<QuizItemDto>();
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось получить");
            }
        }
    }

    async Task ReadFiles()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/contentfile/course/" + CourseId);

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Направления получены");
            files = Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFileDto[]>(apiResponse.Result.ToString()).ToList<ContentFileDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось получить");
        }
    }

    async Task ReadComments()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/comment/course/" + CourseId);

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Направления получены");
            comments = Newtonsoft.Json.JsonConvert.DeserializeObject<CommentDto[]>(apiResponse.Result.ToString()).ToList<CommentDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось получить");
        }
    }

    async Task ReadTexts()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/text/course/" + CourseId);

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Направления получены");
            texts = Newtonsoft.Json.JsonConvert.DeserializeObject<TextDto[]>(apiResponse.Result.ToString()).ToList<TextDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось получить");
        }
    }
}
