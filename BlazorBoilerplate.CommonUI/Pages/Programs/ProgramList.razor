@page "/program_list"
@using BlazorBoilerplate.Shared.Dto.Blog
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject IMatToaster matToaster
@using System.Net

<MainContainer Style="box-shadow: 1px 1px 0 500px rgba(0, 0, 0, 0.5) inset;"
               Title="Worklab"
               SubTitle="Погрузись в эту сферу с головой"
               ContentTitle="Пример добавления направлений">
    @if (IsAdminOrCoordinator)
    {
        <div style="width:135px;">
            <MatButton Icon="playlist_add" Label="Новое направление" OnClick="@((e) => OpenDialog())" Raised="true"></MatButton>
        </div>
    }
    <MatDivider />
    <div class="content">
        <h1 class="heading">
            Название направления
        </h1>
        @foreach (var program in courses) // courses.Where(x => x. DirectionName == "Medicine")
        {
            <div class="card">
                <div class="front" style="background-image: url(@program.PicturePath);">
                    <p>@program.CourseName</p>
                </div>
                <div class="back">
                    <div>
                        <p>@program.Annotation</p>
                        <button class="button" style="color: white;">
                            <MatButton Link="@navigationManager.ToAbsoluteUri("courses/"+program.CourseId).AbsoluteUri">Попробовать</MatButton>
                        </button>
                        @if (IsAdminOrCoordinator)
                        {
                            <MatIconButton Icon="delete" OnClick="@(() => OpenDeleteDialog(program.CourseId))"></MatIconButton>
                        }
                    </div>
                </div>
            </div>
        }


    </div>

    <MatDialog @bind-IsOpen="@courseDialogIsOpen">
        <MatDialogTitle>Создать</MatDialogTitle>
        <MatDialogContent>
            <EditForm Model="@Course" OnValidSubmit="@NewEntity">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <fieldset>
                    <div class="form-group">
                        <MatTextField @bind-Value="@Course.CourseName" Label="Название курса" Icon="title" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@Course.DirectionName" Label="Название направления" Icon="title" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@Course.Annotation" Label="Описание" TextArea="true" FullWidth="true"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@Course.PicturePath" Label="Путь к картинке, если надо" Icon="title" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    </div>
                </fieldset>
            </EditForm>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { courseDialogIsOpen = false; })">Закрыть</MatButton>
            <MatButton OnClick="@NewEntity">Завершить</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@courseDeleteDialogOpen" Style="z-index:100">
        <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Подтвердить удаление</MatDialogTitle>
        <MatDialogContent>
            Хотите удалить @Course.CourseName ?
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { courseDeleteDialogOpen = false; })">Закрыть</MatButton>
            <MatButton OnClick="@Delete">Удалить</MatButton>
        </MatDialogActions>
    </MatDialog>
</MainContainer>


@code {
    private bool IsAdminOrCoordinator = false;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    bool courseDeleteDialogOpen = false;
    bool courseDialogIsOpen = false;
    List<CourseDto> courses = new List<CourseDto>();
    CourseDto Course { get; set; } = new CourseDto();

    protected override async Task OnInitializedAsync()
    {
        await LoadMainEntities();

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            IsAdminOrCoordinator = user.IsInRole("Administrator") || user.IsInRole("Coordinator");
        }
    }

    async Task LoadMainEntities()
    {
        await ReadCourses();

    }

    async Task ReadCourses()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/course");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Направления получены");
            courses = Newtonsoft.Json.JsonConvert.DeserializeObject<CourseDto[]>(apiResponse.Result.ToString()).ToList<CourseDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось получить");
        }
    }

    public async void Update(CourseDto course)
    {
        ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/course", course);
        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Обновлено");
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось обновить");
        }
    }

    public async Task NewEntity()
    {
        courseDialogIsOpen = false;
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/course", Course);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                await LoadMainEntities();
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось создать");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать");
        }
    }

    //Delete
    public async Task Delete()
    {
        try
        {
            var response = await Http.DeleteAsync("api/course/" + Course.CourseId);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Удалено", MatToastType.Success);
                courses.Remove(Course);
                StateHasChanged();
            }
            else
            {
                matToaster.Add("Не удалось удалить: " + response.StatusCode, MatToastType.Danger);
            }
            courseDeleteDialogOpen = false;
            Course = new CourseDto(); //reset course after delete
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось сохранить");
        }
    }

    public void OpenDialog()
    {
        courseDialogIsOpen = true;
    }

    public void OpenDeleteDialog(long courseID)
    {
        Course = courses.Where(x => x.CourseId == courseID).SingleOrDefault();
        courseDeleteDialogOpen = true;
    }
}
