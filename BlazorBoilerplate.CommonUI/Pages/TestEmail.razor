@page "/email"
@using BlazorBoilerplate.Shared.Dto.Email

@inject HttpClient Http
@inject IMatToaster matToaster
@attribute [Authorize(Policy = Policies.IsAdmin)]

@using static Microsoft.AspNetCore.Http.StatusCodes

<h1>Отправка письма</h1>
<p>Отправляет тестовое письмо, которое находится в хелпере</p>
<EditForm Model="@emailParameters" OnValidSubmit="@SendEmail">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset>
        <div class="form-group">
            <MatTextField @bind-Value="@emailParameters.ToAddress" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
        </div>
        <div class="form-group d-flex justify-content-end">
            <MatButton Type="submit" Raised="true">Отправить тестовое письмо</MatButton>
        </div>
    </fieldset>
</EditForm>

@code {

    EmailDto emailParameters { get; set; } = new EmailDto();
    protected override void OnInitialized()
    {
        //set the template name so it passes model validation
        emailParameters.TemplateName = "Test";
    }

    async Task SendEmail()
    {
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/Email/Send", emailParameters);

            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось отправить");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось отправить");
        }
    }
}
