@using BlazorBoilerplate.Shared.Dto.Blog
@inject HttpClient Http
@inject IMatToaster matToaster
@using System.Net

<div style="width:135px;">
    <MatButton Icon="playlist_add" Label="Текст" OnClick="@((e) => OpenDialog())"
               Style="background-color: #4F94C1; color: snow; border-radius: 5px; margin: 10px;"></MatButton>
</div>

<MatDialog Class="modal" @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle Class="modal-dialog modal-lg">Создать</MatDialogTitle>
    <MatDialogContent Class="modal-content">
        <EditForm Model="@Text">
            <fieldset>
                <BlazoredTextEditor @ref="@QuillHtml">
                    <ToolbarContent>
                        <span class="ql-formats">
                            <select class="ql-font">
                                <option selected=""></option>
                                <option value="serif"></option>
                                <option value="monospace"></option>
                            </select>
                            <select class="ql-size">
                                <option value="small"></option>
                                <option selected=""></option>
                                <option value="large"></option>
                                <option value="huge"></option>
                            </select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                            <button class="ql-indent" value="-1"></button>
                            <button class="ql-indent" value="+1"></button>
                            <select class="ql-align">
                                <option selected=""></option>
                                <option value="center"></option>
                                <option value="right"></option>
                                <option value="justify"></option>
                            </select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>
                    </EditorContent>
                </BlazoredTextEditor>
            </fieldset>
            <MatDivider />
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Закрыть</MatButton>
        <MatButton OnClick="@NewText">Завершить</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    bool dialogIsOpen = false;
    string value = ""; // Посмотри в документации, как вытащить сгенерированный текст из редактора и дальше просто присвоить нужно

    TextDto Text { get; set; } = new TextDto();
    BlazoredTextEditor QuillHtml;
    string QuillHTMLContent;

    [Parameter]
    public int CourseId { get; set; }

    public void OpenDialog()
    {
        dialogIsOpen = true;
    }

    public async Task NewText()
    {
        dialogIsOpen = false;
        try
        {
            Text.TextContent = await this.QuillHtml.GetHTML();
            Text.CourseId = CourseId;
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/text", Text);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                Text = new TextDto();
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось создать");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать");
        }
    }
}

