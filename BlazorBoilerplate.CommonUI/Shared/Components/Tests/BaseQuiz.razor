@using BlazorBoilerplate.Shared.Dto.Blog
@inject HttpClient Http
@inject IMatToaster matToaster
@using System.Net

<div style="width:135px;">
    <MatButton Icon="playlist_add" Label="Тест" OnClick="@((e) => OpenDialog())" 
               Style="background-color: #4F94C1; color: snow; border-radius: 5px; margin: 10px;"></MatButton>
</div>

<MatDialog Class="modal" @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle Class="modal-dialog modal-lg">Создать</MatDialogTitle>
    <MatDialogContent Class="modal-content">
        <EditForm Model="@Quiz">
            <p>
                <MatTextField Label="Название" Id="@($"{Quiz?.DirectionTitle}")" @bind-Value="@Quiz.DirectionTitle"></MatTextField>
            </p>
            @foreach (var newQuestion in quizItems)
            {
                <fieldset>
                    <div class="form-group">
                        <input placeholder="Ваш вопрос" id="@($"{newQuestion?.Question}")" value="@newQuestion?.Question"
                               @onchange="@(e => newQuestion.Question = e.Value.ToString())" />
                    </div>
                    <div class="form-group">
                        <input placeholder="Варианты ответов" id="@($"{newQuestion?.Answers}")" value="@newQuestion?.Answers"
                               @onchange="@(e => newQuestion.Answers = e.Value.ToString())" />
                    </div>
                    <div class="form-group">
                        <input placeholder="Правильный ответ" id="@($"{newQuestion?.RightAnswer}")" value="@newQuestion?.RightAnswer"
                               @onchange="@(e => newQuestion.RightAnswer = e.Value.ToString())" />
                    </div>
                    <div class="form-group">
                        <input placeholder="Путь к картинке" id="@($"{newQuestion?.PicturePath}")" value="@newQuestion?.PicturePath"
                               @onchange="@(e => newQuestion.PicturePath = e.Value.ToString())" />
                    </div>
                </fieldset>
                <MatDivider />
            }
            <br />
            <MatDivider />
            <MatButton OnClick="@((e) => { dialogIsOpen = false; questionDialogIsOpen = true; })">Вопрос</MatButton>
            <MatDivider />
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Закрыть</MatButton>
        <MatButton OnClick="@CreateQuiz">Завершить</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog Class="modal" IsOpen="@questionDialogIsOpen">
    <MatDialogTitle Class="modal-dialog modal-sm">Вопрос</MatDialogTitle>
    <MatDialogContent Class="modal-content">
        <EditForm Model="@QuizItem" OnValidSubmit="@CreateQuestion">
            <fieldset>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.Question" Label="Ваш вопрос"></MatTextField>
                    </p>
                </div>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.Answers" Label="Ваши ответы"></MatTextField>
                    </p>
                </div>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.RightAnswer" Label="Правильный ответ"></MatTextField>
                    </p>
                </div>
                <div class="form-group">
                    <p>
                        <MatTextField @bind-Value="@QuizItem.PicturePath" Label="Путь к картинке"></MatTextField>
                    </p>
                </div>
            </fieldset>
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@((e) => { questionDialogIsOpen = false ; dialogIsOpen = true;})">Х</MatButton>
        <MatButton Style="text-align: center;" OnClick="@CreateQuestion">Дальше</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    bool dialogIsOpen = false;
    bool questionDialogIsOpen = false;
    List<QuizItemDto> quizItems = new List<QuizItemDto>();
    QuizDto Quiz { get; set; } = new QuizDto();
    QuizItemDto QuizItem { get; set; } = new QuizItemDto();

    [Parameter]
    public long CourseId { get; set; }

    public async void Update(QuizDto quiz)
    {
        //this updates the IsCompleted flag only
        try
        {
            quiz.Items = quizItems;
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/quiz", quiz);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось сохранить");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось сохранить");
        }
    }

    public async Task Delete()
    {
        try
        {
            var response = await Http.DeleteAsync("api/quiz/" + Quiz.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Удалено", MatToastType.Success);
            }
            else
            {
                matToaster.Add("Не удалось удалить: " + response.StatusCode, MatToastType.Danger);
            }
            Quiz = new QuizDto() { CreationDate = DateTime.Now };
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось сохранить");
        }
    }

    public void OpenDialog()
    {
        dialogIsOpen = true;
    }

    public void CreateQuestion()
    {
        try
        {
            QuizItem.QuizId = Quiz.Id;
            quizItems.Add(QuizItem);
            QuizItem = new QuizItemDto();
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать вопрос");
        }
    }

    public async Task CreateQuiz()
    {
        dialogIsOpen = false;
        try
        {
            Quiz.Items = quizItems;
            Quiz.CreationDate = DateTime.Now;
            Quiz.CourseId = CourseId;
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/quiz", Quiz);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                Quiz = new QuizDto() { CreationDate = DateTime.Now };
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось создать");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать");
        }
    }
}
