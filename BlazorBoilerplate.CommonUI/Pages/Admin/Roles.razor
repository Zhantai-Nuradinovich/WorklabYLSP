@page "/admin/roles"
@using BlazorBoilerplate.Shared.Dto.Admin
@attribute [Authorize(Policy = Policies.IsAdmin)]
@inject HttpClient Http
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider authStateProvider
@inject IMatToaster matToaster
@inject AppState appState

@using System.Net

<h1>Роли</h1>
<p>Управление ролями.</p>

@if (roles == null)
{
<LoadingBackground>
</LoadingBackground> }
            else
            {
<MatTable Class="mat-elevation-z5" Items="@roles" LoadInitialData="true" Striped="true" RequestApiOnlyOnce="true" ApiUrl="api/roles"
          DebounceMilliseconds="150">
    <MatTableHeader>
        <th><MatButton Icon="add" Label="Новая роль" OnClick="@(() => OpenUpsertRoleDialog())"></MatButton></th>
        <th>Название</th>
        <th>Возможности</th>
    </MatTableHeader>
    <MatTableRow Context="RoleRow">
        <td>
            <div style="width:155px;">
                <MatIconButton Icon="edit" OnClick="@(() => OpenUpsertRoleDialog(@RoleRow.Name))"></MatIconButton>
                <MatIconButton Icon="delete" OnClick="@(() => OpenDeleteDialog(@RoleRow.Name))"></MatIconButton>
            </div>
        </td>
        <td><div style="width:130px;">@RoleRow.Name</div></td>
        <td>
            <MatChipSet>
                @foreach (var permission in @RoleRow.Permissions)
                    {
<MatChip Label="@permission"></MatChip>                        }
            </MatChipSet>
        </td>
    </MatTableRow>
</MatTable>}

<MatDialog @bind-IsOpen="@isUpsertRoleDialogOpen">
    <MatDialogTitle>
        @labelUpsertDialogTitle
    </MatDialogTitle>
    <MatDialogContent>
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@currentRoleName" Disabled="@isCurrentRoleReadOnly" Label="Название роли" Icon="add" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
        </fieldset>

        <MatTable Items="@permissionsSelections" Class="mat-elevation-z5" ShowPaging="false">
            <MatTableHeader>
                <th>Возможности</th>
                <th>Позволить</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Name</td>
                <td><MatCheckbox TValue="bool" @bind-Value="@context.IsSelected"></MatCheckbox></td>
            </MatTableRow>
        </MatTable>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { isUpsertRoleDialogOpen = false; })">Закрыть</MatButton>
        <MatButton OnClick="@UpsertRole">@labelUpsertDialogOkButton</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@isDeleteRoleDialogOpen" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Подтвердить</MatDialogTitle>
    <MatDialogContent>
        Вы действительно хотите удалить роль "@currentRoleName" ?
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { isDeleteRoleDialogOpen = false; })">Закрыть</MatButton>
        <MatButton OnClick="@DeleteRoleAsync">Удалить</MatButton>
    </MatDialogActions>
</MatDialog>

@code { int pageSize { get; set; } = 15;
            int currentPage { get; set; } = 0;

            string currentRoleName = "";
            bool isCurrentRoleReadOnly = false;

            List<RoleDto> roles;

            #region OnInitializedAsync

            protected override async Task OnInitializedAsync()
            {
                await InitializeRolesListAsync();
            }

            public async Task InitializeRolesListAsync()
            {
                try
                {
                    var apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<RoleDto>>>($"api/Admin/Roles?pageSize={pageSize}&pageNumber={currentPage}");

                    if (apiResponse.IsSuccessStatusCode)
                    {
                        matToaster.Add(apiResponse.Message, MatToastType.Success, "Роли получены");
                        roles = apiResponse.Result;
                    }
                    else
                        matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не получилось получить роли");
                }
                catch (Exception ex)
                {
                    matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Ошибка получения ролей");
                }
            }

            #endregion

            #region OpenUpsertRoleDialog

            bool isUpsertRoleDialogOpen = false;
            bool isInsertOperation;
            List<PermissionSelection> permissionsSelections = new List<PermissionSelection>();

            string labelUpsertDialogTitle;
            string labelUpsertDialogOkButton;

            public class PermissionSelection
            {
                public bool IsSelected { get; set; }
                public string Name { get; set; }
            };

            public async Task OpenUpsertRoleDialog(string roleName = "")
            {
                try
                {
                    currentRoleName = roleName;

                    isInsertOperation = string.IsNullOrWhiteSpace(roleName);

                    // Update the UI
                    if (isInsertOperation)
                    {
                        labelUpsertDialogTitle = "Создать роль";
                        labelUpsertDialogOkButton = "Создать роль";
                    }
                    else
                    {
                        labelUpsertDialogTitle = "Изменить роль";
                        labelUpsertDialogOkButton = "Обновить роль";
                    }

                    // Retrieve the role
                    RoleDto role = null;
                    isCurrentRoleReadOnly = !isInsertOperation;

                    if (isCurrentRoleReadOnly)
                    {
                        var roleResponse = await Http.GetFromJsonAsync<ApiResponseDto<RoleDto>>($"api/Admin/Role/{roleName}");
                        role = roleResponse.Result;
                    }

                    // Setup the permissions
                    var response = await Http.GetFromJsonAsync<ApiResponseDto<List<string>>>("api/Admin/Permissions");
                    permissionsSelections.Clear();


                    foreach (var name in response.Result)
                    {
                        permissionsSelections.Add(new PermissionSelection
                        {
                            Name = name,
                            IsSelected = (role == null) ? false : role.Permissions.Contains(name)
                        });
                    }

                    isUpsertRoleDialogOpen = true;
                }
                catch (Exception ex)
                {
                    matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, $"{labelUpsertDialogTitle} Error");
                }
            }

            public async Task UpsertRole()
            {
                try
                {
                    if (string.IsNullOrWhiteSpace(currentRoleName))
                    {
                        matToaster.Add("Ошибка создания роли", MatToastType.Danger, "Введите название роли");
                        return;
                    }

                    RoleDto request = new RoleDto
                    {
                        Name = currentRoleName,
                        Permissions = new List<string>()
                    };

                    foreach (var status in permissionsSelections)
                        if (status.IsSelected)
                            request.Permissions.Add(status.Name);

                    ApiResponseDto apiResponse;

                    if (isInsertOperation)
                        apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/Admin/Role", request);
                    else
                        apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/Admin/Role", request);

                    if (apiResponse.IsSuccessStatusCode)
                    {
                        matToaster.Add(isInsertOperation ? "Роль создана" : "Роль обновлена", MatToastType.Success);

                        //await PopulateRoleList();
                        StateHasChanged();
                    }
                    else
                        matToaster.Add(apiResponse.Message, MatToastType.Danger);


                    // this.StateHasChanged();
                    await OnInitializedAsync();

                    isUpsertRoleDialogOpen = false;
                }
                catch (Exception ex)
                {
                    matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Ошибка");
                }
            }

            #endregion

            #region OpenDeleteDialog

            bool isDeleteRoleDialogOpen = false;

            public void OpenDeleteDialog(string roleName)
            {
                currentRoleName = roleName;
                isDeleteRoleDialogOpen = true;
            }

            public async Task DeleteRoleAsync()
            {
                try
                {
                    var response = await Http.DeleteAsync($"api/Admin/Role/{currentRoleName}");
                    if (response.StatusCode != (HttpStatusCode)Status200OK)
                    {
                        matToaster.Add("Не удалось удалить", MatToastType.Danger);
                        return;
                    }

                    matToaster.Add("Роль удалена", MatToastType.Success);
                    await OnInitializedAsync();
                    isDeleteRoleDialogOpen = false;
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Ошибка удаления роли");
                }
            }

            #endregion
}
