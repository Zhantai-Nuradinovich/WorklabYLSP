@page "/program_list"
@using BlazorBoilerplate.Shared.Dto.Blog
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject IMatToaster matToaster
@using System.Net

<MainContainer Style="box-shadow: 1px 1px 0 500px rgba(0, 0, 0, 0.5) inset;"
               Title="Worklab"
               SubTitle="Погрузись в эту сферу с головой"
               ContentTitle="Пример добавления направлений">
    @if (IsAdminOrCoordinator) 
    {
        <div style="width:135px;">
            <MatButton Icon="playlist_add" Label="Новое направление" OnClick="@((e) => OpenDialog())" Raised="true"></MatButton>
        </div>
    }
    <MatDivider />
    @foreach (var dir in directions)
    {
        <div class="content">
            <h1 class="heading">
                @dir.Title <br />
                @if (IsAdminOrCoordinator)
                {
                    <MatIconButton Icon="delete" OnClick="@(() => OpenDirDeleteDialog(dir.ScienceDirectionId))"></MatIconButton>
                }
            </h1>
            <p class="description">@dir.Description</p>
            @foreach (var oneCourse in courses.Where(x => x.ScienceDirectionId == dir.ScienceDirectionId))
            {
                <div class="card">
                    <div class="front" style="background-image: url(//source.unsplash.com/300x40&quot;+n+&quot;);">
                        <p>@oneCourse.CourseName</p>
                    </div>
                    <div class="back">
                        <div>
                            <p>@oneCourse.Description</p>
                            <button class="button" style="color: white;">
                                <MatButton Link="@navigationManager.ToAbsoluteUri("courses/"+oneCourse.CourseId).AbsoluteUri">Попробовать</MatButton>
                            </button>
                            @if (IsAdminOrCoordinator)
                            {
                                <MatIconButton Icon="delete" OnClick="@(() => OpenCourseDeleteDialog(oneCourse.CourseId))"></MatIconButton>
                            }
                        </div>
                    </div>
                </div>
            }
             @if (IsAdminOrCoordinator)
             {
                <MatIconButton Icon="add" OnClick="@((e) => OpenCourseDialog(dir.ScienceDirectionId))"></MatIconButton>
             }
             <MatDivider />
        </div>
    }

    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>Создать</MatDialogTitle>
        <MatDialogContent>
            <EditForm Model="@Direction" OnValidSubmit="@CreateDirection">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <fieldset>
                    <div class="form-group">
                        <MatTextField @bind-Value="@Direction.Title" Label="Название" Icon="title" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@Direction.Description" Label="Описание" TextArea="true" FullWidth="true"></MatTextField>
                    </div>
                </fieldset>
            </EditForm>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { courseDialogIsOpen = false; })">Закрыть</MatButton>
            <MatButton OnClick="@CreateDirection">Завершить</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@courseDialogIsOpen">
        <MatDialogTitle>Создать</MatDialogTitle>
        <MatDialogContent>
            <EditForm Model="@Course" OnValidSubmit="@CreateCourse">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <fieldset>
                    <div class="form-group">
                        <MatTextField @bind-Value="@Course.CourseName" Label="Название" Icon="title" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@Course.Description" Label="Описание" TextArea="true" FullWidth="true"></MatTextField>
                    </div>
                </fieldset>
            </EditForm>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogIsOpen = false; })">Закрыть</MatButton>
            <MatButton OnClick="@CreateCourse">Завершить</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@courseDeleteDialogOpen" Style="z-index:100">
        <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Подтвердить удаление</MatDialogTitle>
        <MatDialogContent>
            Хотите удалить @Course.CourseName ?
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { courseDeleteDialogOpen = false; })">Закрыть</MatButton>
            <MatButton OnClick="@DeleteCourse">Удалить</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@dirDeleteDialogOpen" Style="z-index:100">
        <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Подтвердить удаление</MatDialogTitle>
        <MatDialogContent>
            Хотите удалить @Direction.Title ?
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dirDeleteDialogOpen = false; })">Закрыть</MatButton>
            <MatButton OnClick="@DeleteDirection">Удалить</MatButton>
        </MatDialogActions>
    </MatDialog>
</MainContainer>


@code {
    private bool IsAdminOrCoordinator = false;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    bool courseDeleteDialogOpen = false;
    bool dirDeleteDialogOpen = false;
    bool dialogIsOpen = false;
    bool courseDialogIsOpen = false;
    bool totalScoreDialogIsOpen = false;
    List<ScienceDirectionDto> directions = new List<ScienceDirectionDto>();
    List<CourseDto> courses = new List<CourseDto>();

    ScienceDirectionDto Direction { get; set; } = new ScienceDirectionDto();
    CourseDto Course { get; set; } = new CourseDto();

    protected override async Task OnInitializedAsync()
    {
        await ReadDirections();
        await ReadCourses();

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            IsAdminOrCoordinator = user.IsInRole("Administrator") || user.IsInRole("Coordinator");
        }
    }

    async Task ReadDirections()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/sciencedirection");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Направления получены");
            directions = Newtonsoft.Json.JsonConvert.DeserializeObject<ScienceDirectionDto[]>(apiResponse.Result.ToString()).ToList<ScienceDirectionDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось получить");
        }
    }

    async Task ReadCourses()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/course");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Направления получены");
            courses = Newtonsoft.Json.JsonConvert.DeserializeObject<CourseDto[]>(apiResponse.Result.ToString()).ToList<CourseDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось получить");
        }
    }

    public async Task CreateDirection()
    {
        dialogIsOpen = false;
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/sciencedirection", Direction);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                Direction = Newtonsoft.Json.JsonConvert.DeserializeObject<ScienceDirectionDto>(apiResponse.Result.ToString());
                directions.Add(Direction);

                Direction = new ScienceDirectionDto(); //reset direction after insert
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось создать");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать");
        }
    }

    public async Task CreateCourse()
    {
        courseDialogIsOpen = false;
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/course", Course);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                Course = Newtonsoft.Json.JsonConvert.DeserializeObject<CourseDto>(apiResponse.Result.ToString());
                courses.Add(Course);

                Course = new CourseDto(); //reset direction after insert
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Не удалось создать");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось создать");
        }
    }

    //Delete
    public async Task DeleteCourse()
    {
        try
        {
            var response = await Http.DeleteAsync("api/course/" + Course.CourseId);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Удалено", MatToastType.Success);
                courses.Remove(Course);
                StateHasChanged();
            }
            else
            {
                matToaster.Add("Не удалось удалить: " + response.StatusCode, MatToastType.Danger);
            }
            courseDeleteDialogOpen = false;
            Course = new CourseDto(); //reset course after delete
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось сохранить");
        }
    }

    public async Task DeleteDirection()
    {
        try
        {
            var response = await Http.DeleteAsync("api/sciencedirection/" + Direction.ScienceDirectionId);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Удалено", MatToastType.Success);
                directions.Remove(Direction);
                StateHasChanged();
            }
            else
            {
                matToaster.Add("Не удалось удалить: " + response.StatusCode, MatToastType.Danger);
            }
            dirDeleteDialogOpen = false;
            Direction = new ScienceDirectionDto(); //reset course after delete
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось сохранить");
        }
    }

    public void OpenDialog()
    {
        dialogIsOpen = true;
    }

    public void OpenCourseDialog(long id)
    {
        courseDialogIsOpen = true;
        Course.ScienceDirectionId = id;
    }

    public void OpenCourseDeleteDialog(long id)
    {
        courseDeleteDialogOpen = true;
        Course.CourseId = id;
    }

    public void OpenDirDeleteDialog(long id)
    {
        dirDeleteDialogOpen = true;
        Direction.ScienceDirectionId = id;
    }
}
