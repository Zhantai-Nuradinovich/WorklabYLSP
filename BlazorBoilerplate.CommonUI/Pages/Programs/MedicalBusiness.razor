@page "/medical_business"
@using BlazorBoilerplate.Shared.Dto.Blog
@inject HttpClient Http
@inject IMatToaster matToaster
@using System.Net


<div class="my-quiz-container" style="min-height: 400px;">
    <div id="quiz">
        <div class="container-fluid">
            <div id="quiz-stats" class="row text-center">
                <div class="col-xs-3">
                    <i class="fa fa-bar-chart"></i>
                </div>
                @if (IsQuizStarted)
                {
                    <div class="col-xs-3 col-lg-2">
                        <p>Вопрос</p>
                        <span class="animated">@curentQuestion/@Quiz.Items.Count</span>
                    </div>
                }
                <div class="col-xs-3 col-lg-2 animated">
                    <p>@Quiz?.DirectionTitle</p>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row" style="justify-content: center;">
                <div class="col-xs-12 col-md-10 col-md-offset-1 text-center">
                    @if (!IsStartButtonClicked)
                    {
                        <div id="quiz-options">
                            <button class="btn quiz-ans-btn animated pulse" @onclick="StartQuiz">Начать</button>
                        </div>
                    }
                    else
                    {
                        @if (IsQuizStarted)
                        {
                            <p id="quiz-question" class="animated">
                                <Animation Effect="@Effect.ZoomIn" Speed="@Speed.Fast" Delay="@Delay.None" Enabled="IsAnimated" IterationCount="1" OnAnimationEnd="AnimationEnd">
                                    @QuizItem?.Question
                                </Animation>
                            </p>
                            @if (!string.IsNullOrEmpty(QuizItem?.PicturePath))
                            {
                                <img src="@QuizItem?.PicturePath" style="height: 100px; width: 100px" />
                            }
                            <div id="quiz-options">
                                @foreach (var variant in QuizItem?.Normalized)
                                {
                                    <button class="btn quiz-ans-btn animated"
                                            @onclick="(e) => { NextQuestion(variant); RunAnimation(); }">
                                        <Animation Effect="@Effect.SlideInDown" Speed="@Speed.Fast" Delay="@Delay.None" Enabled="IsAnimated" IterationCount="1" OnAnimationEnd="AnimationEnd">
                                            @variant
                                        </Animation>
                                    </button>
                                }
                            </div>
                        }
                        else
                        {
                            <div id="quiz-options">
                                <button class="btn quiz-ans-btn animated pulse">Результат @TotalScore %</button>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    bool IsQuizStarted { get; set; } = false;
    bool IsStartButtonClicked { get; set; } = false;
    bool deleteDialogOpen = false;
    double TotalScore { get; set; } = 0;
    int curentQuestion { get; set; } = 1;

    public QuizDto Quiz { get; set; } = new QuizDto() { Id = 2, CourseId = 3, DirectionTitle = "MedicalBusuiness", Items = new List<QuizItemDto>() { new QuizItemDto() { Id = 3, QuizId = 3, PicturePath = "", Question = "Кто?", Answers = "RRR1NZN1QQQ1NZN1koko", RightAnswer= "RRR" }, new QuizItemDto() { Id = 3, QuizId = 3, PicturePath = "", Question = "КтоRNJRNJ?", Answers = "FFRRR1NZN1QQFQ1NZN1koko", RightAnswer= "FFRRR" } } };
    public List<QuizItemDto> UserQuizItems { get; set; } = new List<QuizItemDto>();
    public QuizItemDto QuizItem { get; set; }
    IEnumerator<QuizItemDto> Enumerator { get; set; }

    bool IsAnimated { get; set; } = true;

    private void RunAnimation()
    {
        IsAnimated = true;
    }

    private void AnimationEnd()
    {
        IsAnimated = false;
    }

    public void StartQuiz()
    {
        IsQuizStarted = true;
        IsStartButtonClicked = true;
        Enumerator = Quiz.Items.GetEnumerator();
        if (Enumerator.MoveNext())
        {
            QuizItem = Enumerator.Current;
        }
    }

    public void NextQuestion(string variant)
    {
        QuizItem.ChoosenAnswer = variant;
        UserQuizItems.Add(QuizItem);

        if (Enumerator.MoveNext())
        {
            QuizItem = Enumerator.Current;
            curentQuestion++;
        }
        else
        {
            CheckResults();
            IsQuizStarted = false;
            QuizItem = null;
        }
    }

    public void CheckResults()
    {
        foreach (var question in UserQuizItems)
        {
            if (question.ChoosenAnswer == question.RightAnswer)
            {
                TotalScore++;
            }
        }

        TotalScore = TotalScore / UserQuizItems.Count * 100;
    }
}
