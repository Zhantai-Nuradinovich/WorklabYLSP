@page "/account/login"
@page "/account/login/{returnurl}"

@using BlazorBoilerplate.Shared.Dto.Account

@layout LoginLayout
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IMatToaster matToaster
@inject AppState appState
@inject NavigationManager NavigationManager
@inject IJSRuntime js

@using static Microsoft.AspNetCore.Http.StatusCodes

<MatCard>
    <div class="hidden-mdc-down">
        <MatIconButton Icon="undo" Class="float-left" @onclick="GoBack" />
        <MatIconButton Icon="home" Class="float-right" Link="/" />
    </div>

    <div class="logo">
        <a href="/" title="Worklab Home"><img src="_content/BlazorBoilerplate.CommonUI/images/logo-work.png" style="width:100px;" title="Worklab Team" alt="YLSP" /><br /></a>
        <br />
        <h4>Логин</h4>
    </div>
    <EditForm Model="@loginParameters" OnValidSubmit="@SubmitLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MatTextField Style="font-family:cursive;" id="userName" @bind-Value="@loginParameters.UserName" Label="Логин" PlaceHolder="Логин..." Icon="person" IconTrailing="true" FullWidth="true" Required="true" tabindex="1"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField Style="font-family:cursive;" @bind-Value="@loginParameters.Password" Label="Пароль" PlaceHolder="Пароль..." Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password" tabindex="2"></MatTextField>
            </div>
            <div class="form-group">
                <MatButton Style="font-family:cursive;" class="float-right" Type="submit" Raised="true" tabindex="3">Войти</MatButton>
                <MatCheckbox @bind-Value="@loginParameters.RememberMe" class="filled-in chk-col-blue">Запомнить</MatCheckbox>
            </div>
            <hr />
            <div>
                <MatButton Style="border-radius: 15px; font-family: cursive;" class="float-left" OnClick="@Register" Raised="true">Зарегистрироваться</MatButton>
                <MatButton Style="border-radius: 15px;" class="float-right" OnClick="@GoogleSignIn" Raised="true"><img height="18" style="margin-left: 5px" src="https://www.google.pl/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png" /></MatButton><br />
            </div>
        </fieldset>
    </EditForm>
</MatCard>
<MatAccordion Style="border-radius: 20px">
    <MatExpansionPanel @bind-Expanded="@forgotPasswordToggle">
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Забыли пароль?</MatExpansionPanelHeader>
            <MatExpansionPanelSubHeader></MatExpansionPanelSubHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <EditForm Model="@forgotPasswordParameters" OnValidSubmit="@ForgotPassword">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <MatTextField Style="font-family:cursive;" @bind-Value="@forgotPasswordParameters.Email" Label="Email" PlaceHolder="Почта..." Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatButton Style="font-family:cursive; border-radius: 15px" class="float-right" Type="submit" Raised="true">Подтвердить</MatButton>
                </div>
            </EditForm>
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
</MatAccordion>

@code {

    string navigateTo = "";
    bool forgotPasswordToggle = false;
    LoginDto loginParameters { get; set; } = new LoginDto();
    ForgotPasswordDto forgotPasswordParameters { get; set; } = new ForgotPasswordDto();

    [Parameter]
    public string ReturnUrl { get; set; }

    private void GoBack()
    {
        if (string.IsNullOrEmpty(ReturnUrl))
            ReturnUrl = "";
        NavigationManager.NavigateTo(ReturnUrl, forceLoad: false);
    }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo(navigationManager.BaseUri + navigateTo, forceLoad: true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await js.InvokeVoidAsync("SetFocus", "userName");

        await base.OnAfterRenderAsync(firstRender);
    }

    void GoogleSignIn()
    {
        navigationManager.NavigateTo(navigationManager.BaseUri + "api/externalauth/challenge/google", true);
    }

    void Register()
    {
        navigationManager.NavigateTo("/account/register");
    }

    async Task SubmitLogin()
    {
        try
        {
            var response = await ((IdentityAuthenticationStateProvider)authStateProvider).Login(loginParameters);
            if (response.StatusCode == Status200OK)
            {
                // On successful Login the response.Message is the Last Page Visited from User Profile
                // We can't navigate yet as the setup is proceeding asynchronously
                if (!string.IsNullOrEmpty(response.Message))
                {
                    navigateTo = response.Message;
                }
                else
                {
                    navigateTo = "/";
                }
            }
            else
            {
                matToaster.Add(response.Message, MatToastType.Danger, "Не удалось войти");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось войти");
        }
    }

    async Task ForgotPassword()
    {
        try
        {
            await ((IdentityAuthenticationStateProvider)authStateProvider).ForgotPassword(forgotPasswordParameters);
            matToaster.Add("Отправлено письмо на почту ", MatToastType.Success);
            forgotPasswordParameters.Email = "";
            forgotPasswordToggle = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Не удалось сбросить пароль");
        }
    }
}