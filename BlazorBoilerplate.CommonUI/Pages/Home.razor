@page "/"

<div class="parallax">
    <div class="my-container">
        <div class="grid-container">
            <div class="grid-item">
                <div class="my-brand">
                    <h1 class="my-title" style="color:aliceblue; font-family: Verdana, Geneva, Tahoma, sans-serif">Worklab<br /></h1>
                    <h3 class="my-subtitle" style="color:aliceblue; font-family: Verdana, Geneva, Tahoma, sans-serif">Выбирая профессию, ты выбираешь своё будущее</h3>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="my-main my-main-raised">
    <div class="my-container">
        <div class="grid-container" style="justify-content: center">
            <div class="grid-item col-sm-12 col-sm-12 col-md-8">
                <h2 style="justify-content: center; text-align: center">Ты можешь стать</h2>
            </div>
        </div>
        <!--About carousels https://mdbootstrap.com/docs/jquery/javascript/carousel/ -->
        <div>
            <Carousel @ref="_carousel">
                <CarouselSlick>
                    <h3>1</h3>
                </CarouselSlick>
                <CarouselSlick>
                    <h3>2</h3>
                </CarouselSlick>
                <CarouselSlick>
                    <h3>3</h3>
                </CarouselSlick>
                <CarouselSlick>
                    <h3>4</h3>
                </CarouselSlick>
            </Carousel>
        </div>
        <div class="button-container">
            <Button OnClick="@( _=>_carousel.Previous())" Size="small">Prev</Button>
            <div>
                @foreach (int i in Enumerable.Range(0, 4))
                {
                    <Button OnClick="@( _=>_carousel.GoTo(i))" Size="small">@(i+1)</Button>
                }
            </div>
            <Button OnClick="@( _=>_carousel.Next())" Size="small">Next</Button>

        </div>
        <style>
            .button-container {
                display: flex;
                justify-content: space-between;
                padding-top: 4px;
            }

            .ant-carousel .slick-slide {
                text-align: center;
                height: 160px;
                line-height: 160px;
                background: #364d79;
                overflow: hidden;
            }

                .ant-carousel .slick-slide h3 {
                    color: #fff;
                }
        </style>

        <div class="grid-container" style="justify-content: center; text-align: center">
            <div class="grid-item col-sm-12 col-sm-12 col-md-8">
                <h3 style="justify-content: center; text-align: center">Выбирай профессию и попробуй её прямо сейчас!!</h3>
                @if (!IsAuthenticated)
                {
                    <MatButton Icon="power_settings_new"
                               Raised="true"
                               Label="Начать"
                               Link="/account/login">
                    </MatButton>
                }
            </div>
        </div>
    </div>
</div>
<MatSnackbar @bind-IsOpen="@lazySnackbarIsOpen">
    <MatSnackbarContent>Если вам понравился продукт, поддержите нас в соцсетях</MatSnackbarContent>
    <MatSnackbarActions>
        <a href="https://www.instagram.com/ylsp_kg/" target="_blank" style="text-decoration: none">
            <MatButton>
                <i class="fa fa-instagram" style="color: white !important" aria-hidden="true"></i>
            </MatButton>
        </a>
        <a href="https://www.facebook.com/ylsp.2020/" target="_blank" style="text-decoration: none">
            <MatButton>
                <i class="fa fa-facebook" style="color: white !important" aria-hidden="true"></i>
            </MatButton>
        </a>
    </MatSnackbarActions>
</MatSnackbar>

@code{ bool lazySnackbarIsOpen = false;
    private bool IsAuthenticated = false;
    Carousel _carousel;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Task.Delay(TimeSpan.FromSeconds(3)).ContinueWith((_) =>
        {
            this.lazySnackbarIsOpen = true;
        });

        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            IsAuthenticated = true;
        }
    }

    public void Dispose()
    {
    }
}